geom_text(data = pos_letras, aes(x = Tratamiento, y = ypos-200, label = Letters), size = 5) +
theme_minimal() +
theme(legend.position = "none")
pos_letras <- data.frame(
Tratamiento = factor(c("A+B", "A", "B", "Control"), levels = c("Control", "A", "B", "A+B")),
ypos = c(280, 290, 300, 310),  # Ajusta si hay solapamiento
Letters = c("a", "ab", "b", "b")
)
ggplot(insectos, aes(x = Tratamiento, y = Conteo, fill = Tratamiento)) +
geom_boxplot(color = "black") +
scale_y_continuous(limits = c(0, 320)) +
scale_x_discrete(labels = c(
"Control", "A", "B", "A+B")
) +
scale_fill_manual(values = c(
"#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C"
)) +
labs(
title = "Boxplot CONTEO",
x = expression("Tratamiento"),
y = "Conteo (uds.)"
) +
geom_text(data = pos_letras, aes(x = Tratamiento, y = ypos-180, label = Letters), size = 5) +
theme_minimal() +
theme(legend.position = "none")
pos_letras <- data.frame(
Tratamiento = factor(c("A+B", "A", "B", "Control"), levels = c("Control", "A", "B", "A+B")),
ypos = c(280, 290, 300, 310),  # Ajusta si hay solapamiento
Letters = c("a", "ab", "b", "b")
)
ggplot(insectos, aes(x = Tratamiento, y = Conteo, fill = Tratamiento)) +
geom_boxplot(color = "black") +
scale_y_continuous(limits = c(0, 320)) +
scale_x_discrete(labels = c(
"Control", "A", "B", "A+B")
) +
scale_fill_manual(values = c(
"#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C"
)) +
labs(
title = "Boxplot CONTEO",
x = expression("Tratamiento"),
y = "Conteo (uds.)"
) +
geom_text(data = pos_letras, aes(x = Tratamiento, y = ypos-150, label = Letters), size = 5) +
theme_minimal() +
theme(legend.position = "none")
pos_letras <- data.frame(
Tratamiento = factor(c("A+B", "A", "B", "Control"), levels = c("Control", "A", "B", "A+B")),
ypos = c(280, 290, 300, 310),  # Ajusta si hay solapamiento
Letters = c("a", "ab", "b", "b")
)
ggplot(insectos, aes(x = Tratamiento, y = Conteo, fill = Tratamiento)) +
geom_boxplot(color = "black") +
scale_y_continuous(limits = c(0, 320)) +
scale_x_discrete(labels = c(
"Control", "A", "B", "A+B")
) +
scale_fill_manual(values = c(
"#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C"
)) +
labs(
title = "Boxplot CONTEO",
x = expression("Tratamiento"),
y = "Conteo (uds.)"
) +
geom_text(data = pos_letras, aes(x = Tratamiento, y = ypos-120, label = Letters), size = 5) +
theme_minimal() +
theme(legend.position = "none")
setwd("C:/Users/dvalh/Desktop/UA/MatesUA/Prácticas de empresa/Códigos míos adicionales")
# Simulamos datos desde la distribución personalizada
set.seed(123)
rpower <- function(n, theta) runif(n)^(1/theta)
dpower <- function(x, theta) ifelse(x >= 0 & x <= 1, theta * x^(theta - 1), 0)
theta_true <- 2
x_data <- rpower(500, theta_true)
# Log-verosimilitud negativa
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dpower(x_data, theta)))
}
# Ajuste MLE usando optim
fit_mle <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
theta_mle <- fit_mle$par
cat("Estimación MLE de theta:", theta_mle, "\n")
# Simulamos datos desde la distribución personalizada
set.seed(123)
rpower <- function(n, theta) runif(n)^(1/theta)
dpower <- function(x, theta) ifelse(x >= 0 & x <= 1, theta * x^(theta - 1), 0)
theta_true <- 2
x_data <- rpower(500, theta_true)
# Log-verosimilitud negativa
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dpower(x_data, theta)))
}
# Ajuste MLE usando optim
fit_mle <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
theta_mle <- fit_mle$par
cat("Estimación MLE de theta:", theta_mle, "\n")
library(rstan)
if(!require("rstan")){install.packages("rstan")}
library(rstan)
library(rstan)
# Preparamos los datos
stan_data <- list(N = length(x_data), x = x_data)
# Compilamos y ajustamos el modelo
fit_bayes <- stan(file = "power_model.stan", data = stan_data, chains = 4, iter = 2000)
library(MCMCpack)
# Log-posterior: log(prior) + log-likelihood
logposterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_prior <- dexp(theta, rate = 1, log = TRUE)  # Priori: theta ~ Exp(1)
log_lik <- sum(log(dpower(x_data, theta)))
return(log_prior + log_lik)
}
# Estimación bayesiana vía MCMC
posterior_samples <- MCMCmetrop1R(
fun = logposterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
# Diagnóstico y resumen
library(coda)
summary(posterior_samples)
plot(posterior_samples)
set.seed(123)
# Distribución "rara" para x dado theta
rcustom <- function(n, theta) {
# Aceptación-rechazo con exponencial como proposal
samples <- numeric(n)
i <- 1
while (i <= n) {
x <- rexp(1, rate = theta)  # proposal
u <- runif(1)
fx <- (theta^2 * x * exp(-theta * x)) / (1 + theta)
gx <- dexp(x, rate = theta)
M <- theta / (1 + theta)  # bound
if (u < fx / (M * gx)) {
samples[i] <- x
i <- i + 1
}
}
samples
}
theta_true <- 2
x_data <- rcustom(500, theta_true)
# Log de la densidad personalizada f(x | theta)
log_lik <- function(theta, x) {
if (theta <= 0) return(-Inf)
sum(log(theta^2 * x * exp(-theta * x) / (1 + theta)))
}
# Log-prior personalizada f(theta)
log_prior <- function(theta) {
if (theta <= 0) return(-Inf)
log( theta^0.5 * exp(-theta) + 0.3 * exp(-10 * (theta - 3)^2) )
}
# Log-posterior total
log_posterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_lik(theta, x_data) + log_prior(theta)
}
library(MCMCpack)
posterior_samples <- MCMCmetrop1R(
fun = log_posterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
library(coda)
summary(posterior_samples)
plot(posterior_samples)
HPDinterval(posterior_samples)
library(MASS)
# Definir densidad personalizada
dcustom <- function(x, theta) {
ifelse(x > 0, (theta^2 * x * exp(-theta * x)) / (1 + theta), 0)
}
# fitdistr requiere que definamos la densidad y sus argumentos
fit_fd <- fitdistr(
x = x_data,
densfun = dcustom,
start = list(theta = 1),
lower = 0.01,
upper = 10
)
print(fit_fd)
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dcustom(x_data, theta)))
}
fit_optim <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
cat("Estimación MLE con optim:", fit_optim$par, "\n")
# Histograma básico
hist(x_data,
breaks = 40,
col = "skyblue",
border = "white",
main = "Histograma de los datos simulados",
xlab = "x",
freq = FALSE)
set.seed(123)
# Distribución "rara" para x dado theta
rcustom <- function(n, theta) {
# Aceptación-rechazo con exponencial como proposal
samples <- numeric(n)
i <- 1
while (i <= n) {
x <- rexp(1, rate = theta)  # proposal
u <- runif(1)
fx <- (theta^2 * x * exp(-theta * x)) / (1 + theta)
gx <- dexp(x, rate = theta)
M <- theta / (1 + theta)  # bound
if (u < fx / (M * gx)) {
samples[i] <- x
i <- i + 1
}
}
samples
}
theta_true <- 2
x_data <- rcustom(500, theta_true)
# Log de la densidad personalizada f(x | theta)
log_lik <- function(theta, x) {
if (theta <= 0) return(-Inf)
sum(log(theta^2 * x * exp(-theta * x) / (1 + theta)))
}
# Log-prior personalizada f(theta)
log_prior <- function(theta) {
if (theta <= 0) return(-Inf)
log( theta^0.5 * exp(-theta) + 0.3 * exp(-10 * (theta - 3)^2) )
}
# Log-posterior total
log_posterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_lik(theta, x_data) + log_prior(theta)
}
library(MCMCpack)
posterior_samples <- MCMCmetrop1R(
fun = log_posterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
library(coda)
summary(posterior_samples)
plot(posterior_samples)
HPDinterval(posterior_samples)
library(MASS)
# Definir densidad personalizada
dcustom <- function(x, theta) {
ifelse(x > 0, (theta^2 * x * exp(-theta * x)) / (1 + theta), 0)
}
# fitdistr requiere que definamos la densidad y sus argumentos
fit_fd <- fitdistr(
x = x_data,
densfun = dcustom,
start = list(theta = 1),
lower = 0.01,
upper = 10
)
print(fit_fd)
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dcustom(x_data, theta)))
}
fit_optim <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
cat("Estimación MLE con optim:", fit_optim$par, "\n")
# Histograma básico
hist(x_data,
breaks = 40,
col = "skyblue",
border = "white",
main = "Histograma de los datos simulados",
xlab = "x",
freq = FALSE)
# Superponer una curva de densidad estimada suavizada (kernel)
lines(density(x_data), col = "blue", lwd = 2)
# (Opcional) Superponer la densidad teórica usada en la simulación
theta_true <- 2
curve((theta_true^2 * x * exp(-theta_true * x)) / (1 + theta_true),
from = 0, to = max(x_data), add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topright", legend = c("Densidad kernel", "Densidad teórica"),
col = c("blue", "red"), lwd = 2, lty = c(1, 2))
set.seed(123)
# Distribución "rara" para x dado theta
rcustom <- function(n, theta) {
# Aceptación-rechazo con exponencial como proposal
samples <- numeric(n)
i <- 1
while (i <= n) {
x <- rexp(1, rate = theta)  # proposal
u <- runif(1)
fx <- (theta^2 * x * exp(-theta * x)) / (1 + theta)
gx <- dexp(x, rate = theta)
M <- theta / (1 + theta)  # bound
if (u < fx / (M * gx)) {
samples[i] <- x
i <- i + 1
}
}
samples
}
theta_true <- 2
x_data <- rcustom(5000, theta_true)
# Log de la densidad personalizada f(x | theta)
log_lik <- function(theta, x) {
if (theta <= 0) return(-Inf)
sum(log(theta^2 * x * exp(-theta * x) / (1 + theta)))
}
# Log-prior personalizada f(theta)
log_prior <- function(theta) {
if (theta <= 0) return(-Inf)
log( theta^0.5 * exp(-theta) + 0.3 * exp(-10 * (theta - 3)^2) )
}
# Log-posterior total
log_posterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_lik(theta, x_data) + log_prior(theta)
}
library(MCMCpack)
posterior_samples <- MCMCmetrop1R(
fun = log_posterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
library(coda)
summary(posterior_samples)
plot(posterior_samples)
HPDinterval(posterior_samples)
library(MASS)
# Definir densidad personalizada
dcustom <- function(x, theta) {
ifelse(x > 0, (theta^2 * x * exp(-theta * x)) / (1 + theta), 0)
}
# fitdistr requiere que definamos la densidad y sus argumentos
fit_fd <- fitdistr(
x = x_data,
densfun = dcustom,
start = list(theta = 1),
lower = 0.01,
upper = 10
)
print(fit_fd)
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dcustom(x_data, theta)))
}
fit_optim <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
cat("Estimación MLE con optim:", fit_optim$par, "\n")
# Histograma básico
hist(x_data,
breaks = 40,
col = "skyblue",
border = "white",
main = "Histograma de los datos simulados",
xlab = "x",
freq = FALSE)
# Superponer una curva de densidad estimada suavizada (kernel)
lines(density(x_data), col = "blue", lwd = 2)
# (Opcional) Superponer la densidad teórica usada en la simulación
theta_true <- 2
curve((theta_true^2 * x * exp(-theta_true * x)) / (1 + theta_true),
from = 0, to = max(x_data), add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topright", legend = c("Densidad kernel", "Densidad teórica"),
col = c("blue", "red"), lwd = 2, lty = c(1, 2))
set.seed(123)
# Distribución "rara" para x dado theta
rcustom <- function(n, theta) {
# Aceptación-rechazo con exponencial como proposal
samples <- numeric(n)
i <- 1
while (i <= n) {
x <- rexp(1, rate = theta)  # proposal
u <- runif(1)
fx <- (theta^2 * x * exp(-theta * x)) / (1 + theta)
gx <- dexp(x, rate = theta)
M <- theta / (1 + theta)  # bound
if (u < fx / (M * gx)) {
samples[i] <- x
i <- i + 1
}
}
samples
}
theta_true <- 2
x_data <- rcustom(50000, theta_true)
# Log de la densidad personalizada f(x | theta)
log_lik <- function(theta, x) {
if (theta <= 0) return(-Inf)
sum(log(theta^2 * x * exp(-theta * x) / (1 + theta)))
}
# Log-prior personalizada f(theta)
log_prior <- function(theta) {
if (theta <= 0) return(-Inf)
log( theta^0.5 * exp(-theta) + 0.3 * exp(-10 * (theta - 3)^2) )
}
# Log-posterior total
log_posterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_lik(theta, x_data) + log_prior(theta)
}
library(MCMCpack)
posterior_samples <- MCMCmetrop1R(
fun = log_posterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
gc()
set.seed(123)
# Distribución "rara" para x dado theta
rcustom <- function(n, theta) {
# Aceptación-rechazo con exponencial como proposal
samples <- numeric(n)
i <- 1
while (i <= n) {
x <- rexp(1, rate = theta)  # proposal
u <- runif(1)
fx <- (theta^2 * x * exp(-theta * x)) / (1 + theta)
gx <- dexp(x, rate = theta)
M <- theta / (1 + theta)  # bound
if (u < fx / (M * gx)) {
samples[i] <- x
i <- i + 1
}
}
samples
}
theta_true <- 2
x_data <- rcustom(500, theta_true)
# Log de la densidad personalizada f(x | theta)
log_lik <- function(theta, x) {
if (theta <= 0) return(-Inf)
sum(log(theta^2 * x * exp(-theta * x) / (1 + theta)))
}
# Log-prior personalizada f(theta)
log_prior <- function(theta) {
if (theta <= 0) return(-Inf)
log( theta^0.5 * exp(-theta) + 0.3 * exp(-10 * (theta - 3)^2) )
}
# Log-posterior total
log_posterior <- function(theta) {
if (theta <= 0) return(-Inf)
log_lik(theta, x_data) + log_prior(theta)
}
library(MCMCpack)
posterior_samples <- MCMCmetrop1R(
fun = log_posterior,
theta.init = 1,
mcmc = 10000,
burnin = 1000,
thin = 10,
verbose = 0
)
library(coda)
summary(posterior_samples)
plot(posterior_samples)
HPDinterval(posterior_samples)
library(MASS)
# Definir densidad personalizada
dcustom <- function(x, theta) {
ifelse(x > 0, (theta^2 * x * exp(-theta * x)) / (1 + theta), 0)
}
# fitdistr requiere que definamos la densidad y sus argumentos
fit_fd <- fitdistr(
x = x_data,
densfun = dcustom,
start = list(theta = 1),
lower = 0.01,
upper = 10
)
print(fit_fd)
negloglik <- function(theta) {
if (theta <= 0) return(Inf)
-sum(log(dcustom(x_data, theta)))
}
fit_optim <- optim(par = 1, fn = negloglik, method = "Brent", lower = 0.01, upper = 10)
cat("Estimación MLE con optim:", fit_optim$par, "\n")
# Histograma básico
hist(x_data,
breaks = 40,
col = "skyblue",
border = "white",
main = "Histograma de los datos simulados",
xlab = "x",
freq = FALSE)
# Superponer una curva de densidad estimada suavizada (kernel)
lines(density(x_data), col = "blue", lwd = 2)
# (Opcional) Superponer la densidad teórica usada en la simulación
theta_true <- 2
curve((theta_true^2 * x * exp(-theta_true * x)) / (1 + theta_true),
from = 0, to = max(x_data), add = TRUE, col = "red", lwd = 2, lty = 2)
legend("topright", legend = c("Densidad kernel", "Densidad teórica"),
col = c("blue", "red"), lwd = 2, lty = c(1, 2))
# (Opcional) Superponer la densidad teórica usada en la simulación
theta_hat <- 1.69  # o el valor obtenido por MLE o MCMC
curve((theta_hat^2 * x * exp(-theta_hat * x)) / (1 + theta_hat),
from = 0, to = max(x_data),
add = TRUE, col = "red", lwd = 2, lty = 2)
