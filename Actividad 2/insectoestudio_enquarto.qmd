---
title: "Actividad 2"
format: pdf
editor: visual
---

```{r}
# ---- Paquetes necesarios ----
if(!require("readxl")){install.packages("readxl")}
if(!require("pwr")){install.packages("pwr")}
if(!require("car")){install.packages("car")}
if(!require("MASS")){install.packages("MASS")}

library(readxl)
library(pwr)
library(car)
library(MASS)

# ---- Importar y explorar datos ----
# Carga de datos desde Excel
insectos = read_xlsx("C:/Users/dvalh/Desktop/UA/MatesUA/Prácticas de empresa + privado/Actividades 1 a 3/Actividad 2/capturas_insectos_.xlsx")
summary(insectos) # Visualización básica de los datos

# ---- Cálculo del tamaño muestral para ANOVA ----
pwr.anova.test(k = 4, n = NULL, f = 0.4, sig.level = 0.05, power = 0.8)
# Estima que n ≈ 15 por grupo sería suficiente

# ---- ANOVA tradicional ----
insectos$Tratamiento = as.factor(insectos$Tratamiento)
modelo_aovtr = aov(Conteo ~ Tratamiento, data = insectos)
summary(modelo_aovtr)

# ---- Diagnóstico de supuestos ----
# Normalidad de residuos
shapiro.test(resid(modelo_aovtr)) # (p < 0.05 → No hay normalidad)

# Homogeneidad de varianzas
leveneTest(Conteo ~ Tratamiento, data = insectos) # (p > 0.05 → Hay homogeneidad)

# ---- Transformación Box-Cox ----
# Añade una pequeña constante para evitar ceros
insectos$Conteo_mod = insectos$Conteo+0.00001
boxcox_result <- boxcox(insectos$Conteo_mod ~ insectos$Tratamiento, lambda = seq(-4, 4, 0.1))
lambda_optimo <- boxcox_result$x[which.max(boxcox_result$y)]
print(lambda_optimo)

# Aplica la transformación óptima
if(abs(lambda_optimo) < 0.01) {
  insectos$conteo_trans <- log(insectos$Conteo_mod + 1)  # +1 para evitar log(0)
} else {
  insectos$conteo_trans <- ((insectos$Conteo_mod + 1)^lambda_optimo - 1)/lambda_optimo
}

# ANOVA sobre datos transformados
modelo_aov_box <- aov(conteo_trans ~ Tratamiento, data = insectos)
summary(modelo_aov_box)

# Comprobación de supuestos en datos transformados
shapiro.test(resid(modelo_aov_box)) # Ahora sí hay normalidad
leveneTest(conteo_trans ~ Tratamiento, data = insectos) # Hay homogeneidad

# ---- Modelos lineales generalizados (GLM) ----

if(!require("DHARMa")){install.packages("DHARMa")}
library(DHARMa)

# Fija el nivel de referencia (Control)
insectos$Tratamiento <- factor(insectos$Tratamiento,
                                levels = c("Control", "A", "B", "A+B"))

# Modelo GLM Gaussiano
modelo_glm1 <- glm(Conteo ~ Tratamiento, family = gaussian(link = "identity"), data = insectos)
summary(modelo_glm1)
Anova(modelo_glm1)
residuos_simulados1 <- simulateResiduals(fittedModel = modelo_glm1)
plot(residuos_simulados1)

# Modelo GLM Poisson
modelo_glm2 <- glm(Conteo ~ Tratamiento, family = poisson(link = "log"), data = insectos)
summary(modelo_glm2)
Anova(modelo_glm2)
residuos_simulados2 <- simulateResiduals(fittedModel = modelo_glm2)
plot(residuos_simulados2)

# Modelo Binomial Negativo
modelo_glmnb <- glm.nb(Conteo ~ Tratamiento, data = insectos)
summary(modelo_glmnb)
Anova(modelo_glmnb)
residuos_simulados3 <- simulateResiduals(fittedModel = modelo_glmnb)
plot(residuos_simulados3)
# Este modelo suele ajustarse mejor en recuentos con sobredispersión

# ---- Modelo beta para proporciones ----
if(!require("betareg")){install.packages("betareg")}
if(!require("statmod")){install.packages("statmod")}
library(betareg)
library(statmod)

# Escala el conteo al rango (0, 1)
insectos$conteo_esc <- (insectos$Conteo - min(insectos$Conteo)) / (max(insectos$Conteo) - min(insectos$Conteo))
# Ajusta valores extremos
epsilon <- 1e-4
insectos$conteo_esc[insectos$conteo_esc == 0] <- epsilon
insectos$conteo_esc[insectos$conteo_esc == 1] <- 1 - epsilon

modelo_glmbeta <- betareg(conteo_esc ~ Tratamiento, data = insectos)
summary(modelo_glmbeta)
Anova(modelo_glmbeta)

residuos <- residuals(modelo_glmbeta, type = "pearson")
plot(residuos)
plot(fitted(modelo_glmbeta), residuos)
abline(h = 0, col = "red")

# ---- GLM Gamma ----
modelo_glm4 <- glm(Conteo_mod ~ Tratamiento, family = Gamma(link = "log"), data = insectos)
summary(modelo_glm4)
residuos_simulados4 <- simulateResiduals(fittedModel = modelo_glm4)
plot(residuos_simulados4)

# ---- Detección de distribución: Cullen & Frey ----
if(!require("fitdistrplus")){install.packages("fitdistrplus")}
library(fitdistrplus)
descdist(insectos$Conteo, boot = 1000)

# ---- Comparaciones post-hoc (Tukey) para binomial negativa ----
if(!require("multcomp")){install.packages("multcomp")}
library(multcomp)
posthoc <- glht(modelo_glmnb, linfct = mcp(Tratamiento = "Tukey"))
summary(posthoc)
plot(posthoc)

# ---- Comparaciones con emmeans (Tukey) ----
if (!require("emmeans")) install.packages("emmeans")
library(emmeans)

emmeans_trat <- emmeans(modelo_glmnb, ~ Tratamiento)
emmeans_trat
comparaciones <- pairs(emmeans_trat, adjust = "tukey")
comparaciones

if (!require("multcompView")) install.packages("multcompView")
library(multcompView)
cld(emmeans_trat, Letters = letters, adjust = "tukey") #Muestra las letras para las medias

# ---- Gráfico de boxplot con letras ----
if(!require("ggplot2")){install.packages("ggplot2")}

pos_letras <- data.frame(
  Tratamiento = factor(c("A+B", "A", "B", "Control"), levels = c("Control", "A", "B", "A+B")),
  ypos = c(280, 290, 300, 310),  # Ajusta para evitar solapamientos
  Letters = c("a", "ab", "b", "b")
)

ggplot(insectos, aes(x = Tratamiento, y = Conteo, fill = Tratamiento)) +
  geom_boxplot(color = "black") +
  scale_y_continuous(limits = c(0, 320)) +
  scale_x_discrete(labels = c(
    "Control", "A", "B", "A+B")
  ) +
  scale_fill_manual(values = c(
    "#A6CEE3", "#1F78B4", "#B2DF8A", "#33A02C"
  )) +
  labs(
    title = "Boxplot CONTEO",
    x = expression("Tratamiento"),
    y = "Conteo (uds.)"
  ) +
  geom_text(data = pos_letras, aes(x = Tratamiento, y = ypos-120, label = Letters), size = 5) +
  theme_minimal() +
  theme(legend.position = "none")
```

